package com.example;

import java.util.ArrayList;

public class WeightedGraph<T> {
    private final boolean undirected;
    public ArrayList<Vertex<T>> map = new ArrayList<>();
    public WeightedGraph() {
        this.undirected = true;
    }

    public WeightedGraph(boolean undirected) {
        this.undirected = undirected;
    }

    public void addVertex(T v) {
        map.add(new Vertex<T>(v));
    }

    public void addEdge(T source, T dest, double weight) {
        if (!hasVertex(source))
            addVertex(source);

        if (!hasVertex(dest))
            addVertex(dest);

        if (hasEdge(source, dest)
            || source.equals(dest))
            return; // reject parallels & self-loops

        if(map.indexOf(new Vertex<T>(source)) == -1){
            return;
        }

        map.get(map.indexOf(new Vertex<T>(source))).addAdjacentVertex(new Vertex<T>(dest), weight);


        if (undirected)
            map.get(map.indexOf(new Vertex<T>(dest))).addAdjacentVertex(new Vertex<T>(source), weight);
    }

    public int getVerticesCount() {
        return map.size();
    }

    public int getEdgesCount() {
        int count = 0;

        for(Vertex<T> to : map){
            count += to.getAdjacentVertices().size();
        }

        if (undirected)
            count /= 2;

        return count;
    }


    public boolean hasVertex(T v) {
        return map.contains(new Vertex<T>(v));
    }

    public boolean hasEdge(T source, T dest) {
        if (!hasVertex(source)) return false;
        return map.get(map.indexOf(new Vertex<T>(source))).getAdjacentVertices().containsKey(new Vertex<T>(dest));
    }
}

